//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BarCodePrint {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("RewDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RewDataSet : System.Data.DataSet {
        
        private WorkerDataTable tableWorker;
        
        private DefTypeDataTable tableDefType;
        
        private RepTypeDataTable tableRepType;
        
        private PlantDataTable tablePlant;
        
        private BarcodeDataTable tableBarcode;
        
        private WorkTypeDataTable tableWorkType;
        
        private System.Data.DataRelation relationWorkType_Worker;
        
        private System.Data.DataRelation relationFK_REW_WORK_PL_ID_REW_PLAN;
        
        private System.Data.DataRelation relationFK_REW_DEFE_PL_ID_REW_PLAN;
        
        private System.Data.DataRelation relationFK_REW_REPA_PL_ID_REW_PLAN2;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RewDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RewDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Worker"] != null)) {
                    base.Tables.Add(new WorkerDataTable(ds.Tables["Worker"]));
                }
                if ((ds.Tables["DefType"] != null)) {
                    base.Tables.Add(new DefTypeDataTable(ds.Tables["DefType"]));
                }
                if ((ds.Tables["RepType"] != null)) {
                    base.Tables.Add(new RepTypeDataTable(ds.Tables["RepType"]));
                }
                if ((ds.Tables["Plant"] != null)) {
                    base.Tables.Add(new PlantDataTable(ds.Tables["Plant"]));
                }
                if ((ds.Tables["Barcode"] != null)) {
                    base.Tables.Add(new BarcodeDataTable(ds.Tables["Barcode"]));
                }
                if ((ds.Tables["WorkType"] != null)) {
                    base.Tables.Add(new WorkTypeDataTable(ds.Tables["WorkType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkerDataTable Worker {
            get {
                return this.tableWorker;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DefTypeDataTable DefType {
            get {
                return this.tableDefType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RepTypeDataTable RepType {
            get {
                return this.tableRepType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlantDataTable Plant {
            get {
                return this.tablePlant;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BarcodeDataTable Barcode {
            get {
                return this.tableBarcode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkTypeDataTable WorkType {
            get {
                return this.tableWorkType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            RewDataSet cln = ((RewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Worker"] != null)) {
                    base.Tables.Add(new WorkerDataTable(ds.Tables["Worker"]));
                }
                if ((ds.Tables["DefType"] != null)) {
                    base.Tables.Add(new DefTypeDataTable(ds.Tables["DefType"]));
                }
                if ((ds.Tables["RepType"] != null)) {
                    base.Tables.Add(new RepTypeDataTable(ds.Tables["RepType"]));
                }
                if ((ds.Tables["Plant"] != null)) {
                    base.Tables.Add(new PlantDataTable(ds.Tables["Plant"]));
                }
                if ((ds.Tables["Barcode"] != null)) {
                    base.Tables.Add(new BarcodeDataTable(ds.Tables["Barcode"]));
                }
                if ((ds.Tables["WorkType"] != null)) {
                    base.Tables.Add(new WorkTypeDataTable(ds.Tables["WorkType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableWorker = ((WorkerDataTable)(base.Tables["Worker"]));
            if ((initTable == true)) {
                if ((this.tableWorker != null)) {
                    this.tableWorker.InitVars();
                }
            }
            this.tableDefType = ((DefTypeDataTable)(base.Tables["DefType"]));
            if ((initTable == true)) {
                if ((this.tableDefType != null)) {
                    this.tableDefType.InitVars();
                }
            }
            this.tableRepType = ((RepTypeDataTable)(base.Tables["RepType"]));
            if ((initTable == true)) {
                if ((this.tableRepType != null)) {
                    this.tableRepType.InitVars();
                }
            }
            this.tablePlant = ((PlantDataTable)(base.Tables["Plant"]));
            if ((initTable == true)) {
                if ((this.tablePlant != null)) {
                    this.tablePlant.InitVars();
                }
            }
            this.tableBarcode = ((BarcodeDataTable)(base.Tables["Barcode"]));
            if ((initTable == true)) {
                if ((this.tableBarcode != null)) {
                    this.tableBarcode.InitVars();
                }
            }
            this.tableWorkType = ((WorkTypeDataTable)(base.Tables["WorkType"]));
            if ((initTable == true)) {
                if ((this.tableWorkType != null)) {
                    this.tableWorkType.InitVars();
                }
            }
            this.relationWorkType_Worker = this.Relations["WorkType_Worker"];
            this.relationFK_REW_WORK_PL_ID_REW_PLAN = this.Relations["FK_REW_WORK_PL_ID_REW_PLAN"];
            this.relationFK_REW_DEFE_PL_ID_REW_PLAN = this.Relations["FK_REW_DEFE_PL_ID_REW_PLAN"];
            this.relationFK_REW_REPA_PL_ID_REW_PLAN2 = this.Relations["FK_REW_REPA_PL_ID_REW_PLAN2"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RewDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RewDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableWorker = new WorkerDataTable();
            base.Tables.Add(this.tableWorker);
            this.tableDefType = new DefTypeDataTable();
            base.Tables.Add(this.tableDefType);
            this.tableRepType = new RepTypeDataTable();
            base.Tables.Add(this.tableRepType);
            this.tablePlant = new PlantDataTable();
            base.Tables.Add(this.tablePlant);
            this.tableBarcode = new BarcodeDataTable();
            base.Tables.Add(this.tableBarcode);
            this.tableWorkType = new WorkTypeDataTable();
            base.Tables.Add(this.tableWorkType);
            this.relationWorkType_Worker = new System.Data.DataRelation("WorkType_Worker", new System.Data.DataColumn[] {
                        this.tableWorkType.WorkTypeIdColumn}, new System.Data.DataColumn[] {
                        this.tableWorker.WorkTypeColumn}, false);
            this.Relations.Add(this.relationWorkType_Worker);
            this.relationFK_REW_WORK_PL_ID_REW_PLAN = new System.Data.DataRelation("FK_REW_WORK_PL_ID_REW_PLAN", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableWorker.PlantIdColumn}, false);
            this.Relations.Add(this.relationFK_REW_WORK_PL_ID_REW_PLAN);
            this.relationFK_REW_DEFE_PL_ID_REW_PLAN = new System.Data.DataRelation("FK_REW_DEFE_PL_ID_REW_PLAN", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableDefType.PlantIdColumn}, false);
            this.Relations.Add(this.relationFK_REW_DEFE_PL_ID_REW_PLAN);
            this.relationFK_REW_REPA_PL_ID_REW_PLAN2 = new System.Data.DataRelation("FK_REW_REPA_PL_ID_REW_PLAN2", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableRepType.PlantIdColumn}, false);
            this.Relations.Add(this.relationFK_REW_REPA_PL_ID_REW_PLAN2);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorker() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDefType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRepType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlant() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBarcode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorkType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            RewDataSet ds = new RewDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void WorkerRowChangeEventHandler(object sender, WorkerRowChangeEvent e);
        
        public delegate void DefTypeRowChangeEventHandler(object sender, DefTypeRowChangeEvent e);
        
        public delegate void RepTypeRowChangeEventHandler(object sender, RepTypeRowChangeEvent e);
        
        public delegate void PlantRowChangeEventHandler(object sender, PlantRowChangeEvent e);
        
        public delegate void BarcodeRowChangeEventHandler(object sender, BarcodeRowChangeEvent e);
        
        public delegate void WorkTypeRowChangeEventHandler(object sender, WorkTypeRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnWorkId;
            
            private System.Data.DataColumn columnWorkName;
            
            private System.Data.DataColumn columnWorkCode;
            
            private System.Data.DataColumn columnWorkType;
            
            private System.Data.DataColumn columnWorkNameEng;
            
            private System.Data.DataColumn columnVisible;
            
            private System.Data.DataColumn columnPlantId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerDataTable() {
                this.TableName = "Worker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkIdColumn {
                get {
                    return this.columnWorkId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkNameColumn {
                get {
                    return this.columnWorkName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkCodeColumn {
                get {
                    return this.columnWorkCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkTypeColumn {
                get {
                    return this.columnWorkType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkNameEngColumn {
                get {
                    return this.columnWorkNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VisibleColumn {
                get {
                    return this.columnVisible;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow this[int index] {
                get {
                    return ((WorkerRow)(this.Rows[index]));
                }
            }
            
            public event WorkerRowChangeEventHandler WorkerRowChanging;
            
            public event WorkerRowChangeEventHandler WorkerRowChanged;
            
            public event WorkerRowChangeEventHandler WorkerRowDeleting;
            
            public event WorkerRowChangeEventHandler WorkerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkerRow(WorkerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow AddWorkerRow(decimal WorkId, string WorkName, string WorkCode, WorkTypeRow parentWorkTypeRowByWorkType_Worker, string WorkNameEng, bool Visible, PlantRow parentPlantRowByFK_REW_WORK_PL_ID_REW_PLAN) {
                WorkerRow rowWorkerRow = ((WorkerRow)(this.NewRow()));
                rowWorkerRow.ItemArray = new object[] {
                        WorkId,
                        WorkName,
                        WorkCode,
                        parentWorkTypeRowByWorkType_Worker[0],
                        WorkNameEng,
                        Visible,
                        parentPlantRowByFK_REW_WORK_PL_ID_REW_PLAN[0]};
                this.Rows.Add(rowWorkerRow);
                return rowWorkerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow FindByWorkId(decimal WorkId) {
                return ((WorkerRow)(this.Rows.Find(new object[] {
                            WorkId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                WorkerDataTable cln = ((WorkerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new WorkerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkId = base.Columns["WorkId"];
                this.columnWorkName = base.Columns["WorkName"];
                this.columnWorkCode = base.Columns["WorkCode"];
                this.columnWorkType = base.Columns["WorkType"];
                this.columnWorkNameEng = base.Columns["WorkNameEng"];
                this.columnVisible = base.Columns["Visible"];
                this.columnPlantId = base.Columns["PlantId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkId = new System.Data.DataColumn("WorkId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkId);
                this.columnWorkName = new System.Data.DataColumn("WorkName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkName);
                this.columnWorkCode = new System.Data.DataColumn("WorkCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkCode);
                this.columnWorkType = new System.Data.DataColumn("WorkType", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.columnWorkNameEng = new System.Data.DataColumn("WorkNameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkNameEng);
                this.columnVisible = new System.Data.DataColumn("Visible", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisible);
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnWorkId}, true));
                this.columnWorkId.AllowDBNull = false;
                this.columnWorkId.Unique = true;
                this.columnWorkName.AllowDBNull = false;
                this.columnWorkName.MaxLength = 40;
                this.columnWorkCode.MaxLength = 20;
                this.columnWorkType.AllowDBNull = false;
                this.columnWorkNameEng.MaxLength = 40;
                this.columnVisible.DefaultValue = ((bool)(true));
                this.columnPlantId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow NewWorkerRow() {
                return ((WorkerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new WorkerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(WorkerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkerRowChanged != null)) {
                    this.WorkerRowChanged(this, new WorkerRowChangeEvent(((WorkerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkerRowChanging != null)) {
                    this.WorkerRowChanging(this, new WorkerRowChangeEvent(((WorkerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkerRowDeleted != null)) {
                    this.WorkerRowDeleted(this, new WorkerRowChangeEvent(((WorkerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkerRowDeleting != null)) {
                    this.WorkerRowDeleting(this, new WorkerRowChangeEvent(((WorkerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkerRow(WorkerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RewDataSet ds = new RewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DefTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDefTypeId;
            
            private System.Data.DataColumn columnDefTypeName;
            
            private System.Data.DataColumn columnDefTypeNameEng;
            
            private System.Data.DataColumn columnDefTypeCode;
            
            private System.Data.DataColumn columnVisible;
            
            private System.Data.DataColumn columnPlantId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeDataTable() {
                this.TableName = "DefType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DefTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DefTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefTypeIdColumn {
                get {
                    return this.columnDefTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefTypeNameColumn {
                get {
                    return this.columnDefTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefTypeNameEngColumn {
                get {
                    return this.columnDefTypeNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefTypeCodeColumn {
                get {
                    return this.columnDefTypeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VisibleColumn {
                get {
                    return this.columnVisible;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRow this[int index] {
                get {
                    return ((DefTypeRow)(this.Rows[index]));
                }
            }
            
            public event DefTypeRowChangeEventHandler DefTypeRowChanging;
            
            public event DefTypeRowChangeEventHandler DefTypeRowChanged;
            
            public event DefTypeRowChangeEventHandler DefTypeRowDeleting;
            
            public event DefTypeRowChangeEventHandler DefTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDefTypeRow(DefTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRow AddDefTypeRow(decimal DefTypeId, string DefTypeName, string DefTypeNameEng, string DefTypeCode, bool Visible, PlantRow parentPlantRowByFK_REW_DEFE_PL_ID_REW_PLAN) {
                DefTypeRow rowDefTypeRow = ((DefTypeRow)(this.NewRow()));
                rowDefTypeRow.ItemArray = new object[] {
                        DefTypeId,
                        DefTypeName,
                        DefTypeNameEng,
                        DefTypeCode,
                        Visible,
                        parentPlantRowByFK_REW_DEFE_PL_ID_REW_PLAN[0]};
                this.Rows.Add(rowDefTypeRow);
                return rowDefTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRow FindByDefTypeId(decimal DefTypeId) {
                return ((DefTypeRow)(this.Rows.Find(new object[] {
                            DefTypeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DefTypeDataTable cln = ((DefTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DefTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDefTypeId = base.Columns["DefTypeId"];
                this.columnDefTypeName = base.Columns["DefTypeName"];
                this.columnDefTypeNameEng = base.Columns["DefTypeNameEng"];
                this.columnDefTypeCode = base.Columns["DefTypeCode"];
                this.columnVisible = base.Columns["Visible"];
                this.columnPlantId = base.Columns["PlantId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDefTypeId = new System.Data.DataColumn("DefTypeId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefTypeId);
                this.columnDefTypeName = new System.Data.DataColumn("DefTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefTypeName);
                this.columnDefTypeNameEng = new System.Data.DataColumn("DefTypeNameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefTypeNameEng);
                this.columnDefTypeCode = new System.Data.DataColumn("DefTypeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefTypeCode);
                this.columnVisible = new System.Data.DataColumn("Visible", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisible);
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDefTypeId}, true));
                this.columnDefTypeId.AllowDBNull = false;
                this.columnDefTypeId.Unique = true;
                this.columnDefTypeName.AllowDBNull = false;
                this.columnDefTypeName.MaxLength = 40;
                this.columnDefTypeNameEng.MaxLength = 40;
                this.columnDefTypeCode.MaxLength = 20;
                this.columnVisible.DefaultValue = ((bool)(true));
                this.columnPlantId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRow NewDefTypeRow() {
                return ((DefTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DefTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DefTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DefTypeRowChanged != null)) {
                    this.DefTypeRowChanged(this, new DefTypeRowChangeEvent(((DefTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DefTypeRowChanging != null)) {
                    this.DefTypeRowChanging(this, new DefTypeRowChangeEvent(((DefTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DefTypeRowDeleted != null)) {
                    this.DefTypeRowDeleted(this, new DefTypeRowChangeEvent(((DefTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DefTypeRowDeleting != null)) {
                    this.DefTypeRowDeleting(this, new DefTypeRowChangeEvent(((DefTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDefTypeRow(DefTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RewDataSet ds = new RewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DefTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RepTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRepTypeId;
            
            private System.Data.DataColumn columnRepTypeName;
            
            private System.Data.DataColumn columnRepTypeNameEng;
            
            private System.Data.DataColumn columnRepTypeCode;
            
            private System.Data.DataColumn columnVisible;
            
            private System.Data.DataColumn columnPlantId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeDataTable() {
                this.TableName = "RepType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RepTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepTypeIdColumn {
                get {
                    return this.columnRepTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepTypeNameColumn {
                get {
                    return this.columnRepTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepTypeNameEngColumn {
                get {
                    return this.columnRepTypeNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepTypeCodeColumn {
                get {
                    return this.columnRepTypeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VisibleColumn {
                get {
                    return this.columnVisible;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRow this[int index] {
                get {
                    return ((RepTypeRow)(this.Rows[index]));
                }
            }
            
            public event RepTypeRowChangeEventHandler RepTypeRowChanging;
            
            public event RepTypeRowChangeEventHandler RepTypeRowChanged;
            
            public event RepTypeRowChangeEventHandler RepTypeRowDeleting;
            
            public event RepTypeRowChangeEventHandler RepTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRepTypeRow(RepTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRow AddRepTypeRow(decimal RepTypeId, string RepTypeName, string RepTypeNameEng, string RepTypeCode, bool Visible, PlantRow parentPlantRowByFK_REW_REPA_PL_ID_REW_PLAN2) {
                RepTypeRow rowRepTypeRow = ((RepTypeRow)(this.NewRow()));
                rowRepTypeRow.ItemArray = new object[] {
                        RepTypeId,
                        RepTypeName,
                        RepTypeNameEng,
                        RepTypeCode,
                        Visible,
                        parentPlantRowByFK_REW_REPA_PL_ID_REW_PLAN2[0]};
                this.Rows.Add(rowRepTypeRow);
                return rowRepTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRow FindByRepTypeId(decimal RepTypeId) {
                return ((RepTypeRow)(this.Rows.Find(new object[] {
                            RepTypeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RepTypeDataTable cln = ((RepTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RepTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRepTypeId = base.Columns["RepTypeId"];
                this.columnRepTypeName = base.Columns["RepTypeName"];
                this.columnRepTypeNameEng = base.Columns["RepTypeNameEng"];
                this.columnRepTypeCode = base.Columns["RepTypeCode"];
                this.columnVisible = base.Columns["Visible"];
                this.columnPlantId = base.Columns["PlantId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRepTypeId = new System.Data.DataColumn("RepTypeId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepTypeId);
                this.columnRepTypeName = new System.Data.DataColumn("RepTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepTypeName);
                this.columnRepTypeNameEng = new System.Data.DataColumn("RepTypeNameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepTypeNameEng);
                this.columnRepTypeCode = new System.Data.DataColumn("RepTypeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepTypeCode);
                this.columnVisible = new System.Data.DataColumn("Visible", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisible);
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRepTypeId}, true));
                this.columnRepTypeId.AllowDBNull = false;
                this.columnRepTypeId.Unique = true;
                this.columnRepTypeName.AllowDBNull = false;
                this.columnRepTypeName.MaxLength = 40;
                this.columnRepTypeNameEng.MaxLength = 40;
                this.columnRepTypeCode.MaxLength = 20;
                this.columnVisible.DefaultValue = ((bool)(true));
                this.columnPlantId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRow NewRepTypeRow() {
                return ((RepTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RepTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RepTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RepTypeRowChanged != null)) {
                    this.RepTypeRowChanged(this, new RepTypeRowChangeEvent(((RepTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RepTypeRowChanging != null)) {
                    this.RepTypeRowChanging(this, new RepTypeRowChangeEvent(((RepTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RepTypeRowDeleted != null)) {
                    this.RepTypeRowDeleted(this, new RepTypeRowChangeEvent(((RepTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RepTypeRowDeleting != null)) {
                    this.RepTypeRowDeleting(this, new RepTypeRowChangeEvent(((RepTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRepTypeRow(RepTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RewDataSet ds = new RewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RepTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlantDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPlantId;
            
            private System.Data.DataColumn columnPlantName;
            
            private System.Data.DataColumn columnPlantNameEng;
            
            private System.Data.DataColumn columnPlantCorpId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantDataTable() {
                this.TableName = "Plant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlantDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlantDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantNameColumn {
                get {
                    return this.columnPlantName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantNameEngColumn {
                get {
                    return this.columnPlantNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantCorpIdColumn {
                get {
                    return this.columnPlantCorpId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow this[int index] {
                get {
                    return ((PlantRow)(this.Rows[index]));
                }
            }
            
            public event PlantRowChangeEventHandler PlantRowChanging;
            
            public event PlantRowChangeEventHandler PlantRowChanged;
            
            public event PlantRowChangeEventHandler PlantRowDeleting;
            
            public event PlantRowChangeEventHandler PlantRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlantRow(PlantRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow AddPlantRow(decimal PlantId, string PlantName, string PlantNameEng, string PlantCorpId) {
                PlantRow rowPlantRow = ((PlantRow)(this.NewRow()));
                rowPlantRow.ItemArray = new object[] {
                        PlantId,
                        PlantName,
                        PlantNameEng,
                        PlantCorpId};
                this.Rows.Add(rowPlantRow);
                return rowPlantRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow FindByPlantId(decimal PlantId) {
                return ((PlantRow)(this.Rows.Find(new object[] {
                            PlantId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PlantDataTable cln = ((PlantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PlantDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPlantId = base.Columns["PlantId"];
                this.columnPlantName = base.Columns["PlantName"];
                this.columnPlantNameEng = base.Columns["PlantNameEng"];
                this.columnPlantCorpId = base.Columns["PlantCorpId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.columnPlantName = new System.Data.DataColumn("PlantName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantName);
                this.columnPlantNameEng = new System.Data.DataColumn("PlantNameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantNameEng);
                this.columnPlantCorpId = new System.Data.DataColumn("PlantCorpId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantCorpId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPlantId}, true));
                this.columnPlantId.AllowDBNull = false;
                this.columnPlantId.Unique = true;
                this.columnPlantId.Caption = "PL_ID";
                this.columnPlantName.AllowDBNull = false;
                this.columnPlantName.Caption = "PL_NAME";
                this.columnPlantName.MaxLength = 40;
                this.columnPlantNameEng.Caption = "PL_NAME_ENG";
                this.columnPlantNameEng.MaxLength = 40;
                this.columnPlantCorpId.AllowDBNull = false;
                this.columnPlantCorpId.Caption = "PL_CORP_ID";
                this.columnPlantCorpId.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow NewPlantRow() {
                return ((PlantRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PlantRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PlantRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlantRowChanged != null)) {
                    this.PlantRowChanged(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlantRowChanging != null)) {
                    this.PlantRowChanging(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlantRowDeleted != null)) {
                    this.PlantRowDeleted(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlantRowDeleting != null)) {
                    this.PlantRowDeleting(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlantRow(PlantRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RewDataSet ds = new RewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BarcodeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnNameEng;
            
            private System.Data.DataColumn columnCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeDataTable() {
                this.TableName = "Barcode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarcodeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BarcodeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameEngColumn {
                get {
                    return this.columnNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeRow this[int index] {
                get {
                    return ((BarcodeRow)(this.Rows[index]));
                }
            }
            
            public event BarcodeRowChangeEventHandler BarcodeRowChanging;
            
            public event BarcodeRowChangeEventHandler BarcodeRowChanged;
            
            public event BarcodeRowChangeEventHandler BarcodeRowDeleting;
            
            public event BarcodeRowChangeEventHandler BarcodeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBarcodeRow(BarcodeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeRow AddBarcodeRow(decimal Id, string Name, string NameEng, string Code) {
                BarcodeRow rowBarcodeRow = ((BarcodeRow)(this.NewRow()));
                rowBarcodeRow.ItemArray = new object[] {
                        Id,
                        Name,
                        NameEng,
                        Code};
                this.Rows.Add(rowBarcodeRow);
                return rowBarcodeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeRow FindById(decimal Id) {
                return ((BarcodeRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BarcodeDataTable cln = ((BarcodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BarcodeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnNameEng = base.Columns["NameEng"];
                this.columnCode = base.Columns["Code"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnNameEng = new System.Data.DataColumn("NameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameEng);
                this.columnCode = new System.Data.DataColumn("Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnId.Caption = "DEFTYPE_ID";
                this.columnName.AllowDBNull = false;
                this.columnName.Caption = "DEFTYPE_NAME";
                this.columnName.MaxLength = 40;
                this.columnNameEng.Caption = "DEFTYPE_NAME_ENG";
                this.columnNameEng.MaxLength = 40;
                this.columnCode.Caption = "DEFTYPE_CODE";
                this.columnCode.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeRow NewBarcodeRow() {
                return ((BarcodeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BarcodeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BarcodeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BarcodeRowChanged != null)) {
                    this.BarcodeRowChanged(this, new BarcodeRowChangeEvent(((BarcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BarcodeRowChanging != null)) {
                    this.BarcodeRowChanging(this, new BarcodeRowChangeEvent(((BarcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BarcodeRowDeleted != null)) {
                    this.BarcodeRowDeleted(this, new BarcodeRowChangeEvent(((BarcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BarcodeRowDeleting != null)) {
                    this.BarcodeRowDeleting(this, new BarcodeRowChangeEvent(((BarcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBarcodeRow(BarcodeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RewDataSet ds = new RewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BarcodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnWorkTypeId;
            
            private System.Data.DataColumn columnWorkTypeName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeDataTable() {
                this.TableName = "WorkType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkTypeIdColumn {
                get {
                    return this.columnWorkTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkTypeNameColumn {
                get {
                    return this.columnWorkTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeRow this[int index] {
                get {
                    return ((WorkTypeRow)(this.Rows[index]));
                }
            }
            
            public event WorkTypeRowChangeEventHandler WorkTypeRowChanging;
            
            public event WorkTypeRowChangeEventHandler WorkTypeRowChanged;
            
            public event WorkTypeRowChangeEventHandler WorkTypeRowDeleting;
            
            public event WorkTypeRowChangeEventHandler WorkTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkTypeRow(WorkTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeRow AddWorkTypeRow(decimal WorkTypeId, string WorkTypeName) {
                WorkTypeRow rowWorkTypeRow = ((WorkTypeRow)(this.NewRow()));
                rowWorkTypeRow.ItemArray = new object[] {
                        WorkTypeId,
                        WorkTypeName};
                this.Rows.Add(rowWorkTypeRow);
                return rowWorkTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                WorkTypeDataTable cln = ((WorkTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new WorkTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkTypeId = base.Columns["WorkTypeId"];
                this.columnWorkTypeName = base.Columns["WorkTypeName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkTypeId = new System.Data.DataColumn("WorkTypeId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkTypeId);
                this.columnWorkTypeName = new System.Data.DataColumn("WorkTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkTypeName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnWorkTypeId}, false));
                this.columnWorkTypeId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeRow NewWorkTypeRow() {
                return ((WorkTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new WorkTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(WorkTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkTypeRowChanged != null)) {
                    this.WorkTypeRowChanged(this, new WorkTypeRowChangeEvent(((WorkTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkTypeRowChanging != null)) {
                    this.WorkTypeRowChanging(this, new WorkTypeRowChangeEvent(((WorkTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkTypeRowDeleted != null)) {
                    this.WorkTypeRowDeleted(this, new WorkTypeRowChangeEvent(((WorkTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkTypeRowDeleting != null)) {
                    this.WorkTypeRowDeleting(this, new WorkTypeRowChangeEvent(((WorkTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkTypeRow(WorkTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RewDataSet ds = new RewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkerRow : System.Data.DataRow {
            
            private WorkerDataTable tableWorker;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorker = ((WorkerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WorkId {
                get {
                    return ((decimal)(this[this.tableWorker.WorkIdColumn]));
                }
                set {
                    this[this.tableWorker.WorkIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkName {
                get {
                    return ((string)(this[this.tableWorker.WorkNameColumn]));
                }
                set {
                    this[this.tableWorker.WorkNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkCode {
                get {
                    try {
                        return ((string)(this[this.tableWorker.WorkCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkCode\' in table \'Worker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorker.WorkCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WorkType {
                get {
                    return ((decimal)(this[this.tableWorker.WorkTypeColumn]));
                }
                set {
                    this[this.tableWorker.WorkTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkNameEng {
                get {
                    try {
                        return ((string)(this[this.tableWorker.WorkNameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkNameEng\' in table \'Worker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorker.WorkNameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visible {
                get {
                    try {
                        return ((bool)(this[this.tableWorker.VisibleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Visible\' in table \'Worker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorker.VisibleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tableWorker.PlantIdColumn]));
                }
                set {
                    this[this.tableWorker.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeRow WorkTypeRow {
                get {
                    return ((WorkTypeRow)(this.GetParentRow(this.Table.ParentRelations["WorkType_Worker"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["WorkType_Worker"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow PlantRow {
                get {
                    return ((PlantRow)(this.GetParentRow(this.Table.ParentRelations["FK_REW_WORK_PL_ID_REW_PLAN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_REW_WORK_PL_ID_REW_PLAN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkCodeNull() {
                return this.IsNull(this.tableWorker.WorkCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkCodeNull() {
                this[this.tableWorker.WorkCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkNameEngNull() {
                return this.IsNull(this.tableWorker.WorkNameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkNameEngNull() {
                this[this.tableWorker.WorkNameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisibleNull() {
                return this.IsNull(this.tableWorker.VisibleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisibleNull() {
                this[this.tableWorker.VisibleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DefTypeRow : System.Data.DataRow {
            
            private DefTypeDataTable tableDefType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DefTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDefType = ((DefTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DefTypeId {
                get {
                    return ((decimal)(this[this.tableDefType.DefTypeIdColumn]));
                }
                set {
                    this[this.tableDefType.DefTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefTypeName {
                get {
                    return ((string)(this[this.tableDefType.DefTypeNameColumn]));
                }
                set {
                    this[this.tableDefType.DefTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefTypeNameEng {
                get {
                    try {
                        return ((string)(this[this.tableDefType.DefTypeNameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DefTypeNameEng\' in table \'DefType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDefType.DefTypeNameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableDefType.DefTypeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DefTypeCode\' in table \'DefType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDefType.DefTypeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visible {
                get {
                    try {
                        return ((bool)(this[this.tableDefType.VisibleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Visible\' in table \'DefType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDefType.VisibleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tableDefType.PlantIdColumn]));
                }
                set {
                    this[this.tableDefType.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow PlantRow {
                get {
                    return ((PlantRow)(this.GetParentRow(this.Table.ParentRelations["FK_REW_DEFE_PL_ID_REW_PLAN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_REW_DEFE_PL_ID_REW_PLAN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefTypeNameEngNull() {
                return this.IsNull(this.tableDefType.DefTypeNameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefTypeNameEngNull() {
                this[this.tableDefType.DefTypeNameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefTypeCodeNull() {
                return this.IsNull(this.tableDefType.DefTypeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefTypeCodeNull() {
                this[this.tableDefType.DefTypeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisibleNull() {
                return this.IsNull(this.tableDefType.VisibleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisibleNull() {
                this[this.tableDefType.VisibleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RepTypeRow : System.Data.DataRow {
            
            private RepTypeDataTable tableRepType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRepType = ((RepTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepTypeId {
                get {
                    return ((decimal)(this[this.tableRepType.RepTypeIdColumn]));
                }
                set {
                    this[this.tableRepType.RepTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepTypeName {
                get {
                    return ((string)(this[this.tableRepType.RepTypeNameColumn]));
                }
                set {
                    this[this.tableRepType.RepTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepTypeNameEng {
                get {
                    try {
                        return ((string)(this[this.tableRepType.RepTypeNameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepTypeNameEng\' in table \'RepType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepType.RepTypeNameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableRepType.RepTypeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepTypeCode\' in table \'RepType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepType.RepTypeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visible {
                get {
                    try {
                        return ((bool)(this[this.tableRepType.VisibleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Visible\' in table \'RepType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepType.VisibleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tableRepType.PlantIdColumn]));
                }
                set {
                    this[this.tableRepType.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow PlantRow {
                get {
                    return ((PlantRow)(this.GetParentRow(this.Table.ParentRelations["FK_REW_REPA_PL_ID_REW_PLAN2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_REW_REPA_PL_ID_REW_PLAN2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepTypeNameEngNull() {
                return this.IsNull(this.tableRepType.RepTypeNameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepTypeNameEngNull() {
                this[this.tableRepType.RepTypeNameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepTypeCodeNull() {
                return this.IsNull(this.tableRepType.RepTypeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepTypeCodeNull() {
                this[this.tableRepType.RepTypeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisibleNull() {
                return this.IsNull(this.tableRepType.VisibleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisibleNull() {
                this[this.tableRepType.VisibleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlantRow : System.Data.DataRow {
            
            private PlantDataTable tablePlant;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlantRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlant = ((PlantDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tablePlant.PlantIdColumn]));
                }
                set {
                    this[this.tablePlant.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantName {
                get {
                    return ((string)(this[this.tablePlant.PlantNameColumn]));
                }
                set {
                    this[this.tablePlant.PlantNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantNameEng {
                get {
                    try {
                        return ((string)(this[this.tablePlant.PlantNameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PlantNameEng\' in table \'Plant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlant.PlantNameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantCorpId {
                get {
                    return ((string)(this[this.tablePlant.PlantCorpIdColumn]));
                }
                set {
                    this[this.tablePlant.PlantCorpIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantNameEngNull() {
                return this.IsNull(this.tablePlant.PlantNameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantNameEngNull() {
                this[this.tablePlant.PlantNameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow[] GetWorkerRows() {
                return ((WorkerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_REW_WORK_PL_ID_REW_PLAN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRow[] GetDefTypeRows() {
                return ((DefTypeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_REW_DEFE_PL_ID_REW_PLAN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRow[] GetRepTypeRows() {
                return ((RepTypeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_REW_REPA_PL_ID_REW_PLAN2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BarcodeRow : System.Data.DataRow {
            
            private BarcodeDataTable tableBarcode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarcodeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBarcode = ((BarcodeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Id {
                get {
                    return ((decimal)(this[this.tableBarcode.IdColumn]));
                }
                set {
                    this[this.tableBarcode.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableBarcode.NameColumn]));
                }
                set {
                    this[this.tableBarcode.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameEng {
                get {
                    try {
                        return ((string)(this[this.tableBarcode.NameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NameEng\' in table \'Barcode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBarcode.NameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableBarcode.CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Code\' in table \'Barcode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBarcode.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameEngNull() {
                return this.IsNull(this.tableBarcode.NameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameEngNull() {
                this[this.tableBarcode.NameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableBarcode.CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableBarcode.CodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkTypeRow : System.Data.DataRow {
            
            private WorkTypeDataTable tableWorkType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorkType = ((WorkTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WorkTypeId {
                get {
                    try {
                        return ((decimal)(this[this.tableWorkType.WorkTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkTypeId\' in table \'WorkType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkType.WorkTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkTypeName {
                get {
                    try {
                        return ((string)(this[this.tableWorkType.WorkTypeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkTypeName\' in table \'WorkType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkType.WorkTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeIdNull() {
                return this.IsNull(this.tableWorkType.WorkTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeIdNull() {
                this[this.tableWorkType.WorkTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNameNull() {
                return this.IsNull(this.tableWorkType.WorkTypeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNameNull() {
                this[this.tableWorkType.WorkTypeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow[] GetWorkerRows() {
                return ((WorkerRow[])(base.GetChildRows(this.Table.ChildRelations["WorkType_Worker"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkerRowChangeEvent : System.EventArgs {
            
            private WorkerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRowChangeEvent(WorkerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DefTypeRowChangeEvent : System.EventArgs {
            
            private DefTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRowChangeEvent(DefTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RepTypeRowChangeEvent : System.EventArgs {
            
            private RepTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRowChangeEvent(RepTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlantRowChangeEvent : System.EventArgs {
            
            private PlantRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRowChangeEvent(PlantRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BarcodeRowChangeEvent : System.EventArgs {
            
            private BarcodeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeRowChangeEvent(BarcodeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkTypeRowChangeEvent : System.EventArgs {
            
            private WorkTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeRowChangeEvent(WorkTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace BarCodePrint.RewDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WorkerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WorkerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Worker";
            tableMapping.ColumnMappings.Add("WORK_ID", "WorkId");
            tableMapping.ColumnMappings.Add("WORK_NAME", "WorkName");
            tableMapping.ColumnMappings.Add("WORK_CODE", "WorkCode");
            tableMapping.ColumnMappings.Add("WORK_TYPE", "WorkType");
            tableMapping.ColumnMappings.Add("WORK_NAME_ENG", "WorkNameEng");
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_WORKER"" WHERE ((""WORK_ID"" = :Original_WORK_ID) AND (""WORK_NAME"" = :Original_WORK_NAME) AND ((:IsNull_WORK_CODE = 1 AND ""WORK_CODE"" IS NULL) OR (""WORK_CODE"" = :Original_WORK_CODE)) AND (""WORK_TYPE"" = :Original_WORK_TYPE) AND ((:IsNull_WORK_NAME_ENG = 1 AND ""WORK_NAME_ENG"" IS NULL) OR (""WORK_NAME_ENG"" = :Original_WORK_NAME_ENG)) AND (""PL_ID"" = :Original_PL_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_WORK_CODE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "WORK_CODE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "WORK_CODE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_WORK_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "WORK_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_WORKER\" (\"WORK_ID\", \"WORK_NAME\", \"WORK_CODE\", \"WORK_TYPE\", \"WORK" +
                "_NAME_ENG\", \"PL_ID\") VALUES (:WORK_ID, :WORK_NAME, :WORK_CODE, :WORK_TYPE, :WORK" +
                "_NAME_ENG, :PL_ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "WORK_CODE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_WORKER"" SET ""WORK_ID"" = :WORK_ID, ""WORK_NAME"" = :WORK_NAME, ""WORK_CODE"" = :WORK_CODE, ""WORK_TYPE"" = :WORK_TYPE, ""WORK_NAME_ENG"" = :WORK_NAME_ENG, ""PL_ID"" = :PL_ID WHERE ((""WORK_ID"" = :Original_WORK_ID) AND (""WORK_NAME"" = :Original_WORK_NAME) AND ((:IsNull_WORK_CODE = 1 AND ""WORK_CODE"" IS NULL) OR (""WORK_CODE"" = :Original_WORK_CODE)) AND (""WORK_TYPE"" = :Original_WORK_TYPE) AND ((:IsNull_WORK_NAME_ENG = 1 AND ""WORK_NAME_ENG"" IS NULL) OR (""WORK_NAME_ENG"" = :Original_WORK_NAME_ENG)) AND (""PL_ID"" = :Original_PL_ID))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "WORK_CODE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("WORK_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_WORK_CODE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "WORK_CODE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "WORK_CODE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "WORK_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_WORK_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "WORK_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_WORK_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "WORK_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = "Data Source=testdb;Persist Security Info=True;User ID=system;Password=manager;Uni" +
                "code=True";
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     WORK_ID, WORK_NAME, WORK_CODE, WORK_TYPE, WORK_NAME_ENG, PL_ID\r\nFROM  " +
                "       REW_WORKER\r\nWHERE     (PL_ID = :PlantId)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.OracleClient.OracleParameter("PlantId", System.Data.OracleClient.OracleType.Number, 22, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByPlantId(RewDataSet.WorkerDataTable dataTable, decimal PlantId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((decimal)(PlantId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet.WorkerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Worker");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DefTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DefTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DefType";
            tableMapping.ColumnMappings.Add("DEFTYPE_ID", "DefTypeId");
            tableMapping.ColumnMappings.Add("DEFTYPE_NAME", "DefTypeName");
            tableMapping.ColumnMappings.Add("DEFTYPE_NAME_ENG", "DefTypeNameEng");
            tableMapping.ColumnMappings.Add("DEFTYPE_CODE", "DefTypeCode");
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_DEFECTTYPE"" WHERE ((""DEFTYPE_ID"" = :Original_DEFTYPE_ID) AND (""DEFTYPE_NAME"" = :Original_DEFTYPE_NAME) AND ((:IsNull_DEFTYPE_NAME_ENG = 1 AND ""DEFTYPE_NAME_ENG"" IS NULL) OR (""DEFTYPE_NAME_ENG"" = :Original_DEFTYPE_NAME_ENG)) AND ((:IsNull_DEFTYPE_CODE = 1 AND ""DEFTYPE_CODE"" IS NULL) OR (""DEFTYPE_CODE"" = :Original_DEFTYPE_CODE)) AND (""PL_ID"" = :Original_PL_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEFTYPE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DEFTYPE_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DEFTYPE_CODE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DEFTYPE_CODE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "DEFTYPE_CODE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_DEFECTTYPE\" (\"DEFTYPE_ID\", \"DEFTYPE_NAME\", \"DEFTYPE_NAME_ENG\", \"" +
                "DEFTYPE_CODE\", \"PL_ID\") VALUES (:DEFTYPE_ID, :DEFTYPE_NAME, :DEFTYPE_NAME_ENG, :" +
                "DEFTYPE_CODE, :PL_ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEFTYPE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "DEFTYPE_CODE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_DEFECTTYPE"" SET ""DEFTYPE_ID"" = :DEFTYPE_ID, ""DEFTYPE_NAME"" = :DEFTYPE_NAME, ""DEFTYPE_NAME_ENG"" = :DEFTYPE_NAME_ENG, ""DEFTYPE_CODE"" = :DEFTYPE_CODE, ""PL_ID"" = :PL_ID WHERE ((""DEFTYPE_ID"" = :Original_DEFTYPE_ID) AND (""DEFTYPE_NAME"" = :Original_DEFTYPE_NAME) AND ((:IsNull_DEFTYPE_NAME_ENG = 1 AND ""DEFTYPE_NAME_ENG"" IS NULL) OR (""DEFTYPE_NAME_ENG"" = :Original_DEFTYPE_NAME_ENG)) AND ((:IsNull_DEFTYPE_CODE = 1 AND ""DEFTYPE_CODE"" IS NULL) OR (""DEFTYPE_CODE"" = :Original_DEFTYPE_CODE)) AND (""PL_ID"" = :Original_PL_ID))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEFTYPE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEFTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "DEFTYPE_CODE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEFTYPE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DEFTYPE_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "DEFTYPE_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DEFTYPE_CODE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DEFTYPE_CODE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEFTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "DEFTYPE_CODE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = "Data Source=testdb;Persist Security Info=True;User ID=system;Password=manager;Uni" +
                "code=True";
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     DEFTYPE_ID, DEFTYPE_NAME, DEFTYPE_NAME_ENG, DEFTYPE_CODE, PL_ID\r\nFROM " +
                "        REW_DEFECTTYPE\r\nWHERE     (PL_ID = :PlantId)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.OracleClient.OracleParameter("PlantId", System.Data.OracleClient.OracleType.Number, 22, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByPlantId(RewDataSet.DefTypeDataTable dataTable, decimal PlantId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((decimal)(PlantId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet.DefTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DefType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RepTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RepType";
            tableMapping.ColumnMappings.Add("REPTYPE_ID", "RepTypeId");
            tableMapping.ColumnMappings.Add("REPTYPE_NAME", "RepTypeName");
            tableMapping.ColumnMappings.Add("REPTYPE_NAME_ENG", "RepTypeNameEng");
            tableMapping.ColumnMappings.Add("REPTYPE_CODE", "RepTypeCode");
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_REPAIRTYPE"" WHERE ((""REPTYPE_ID"" = :Original_REPTYPE_ID) AND (""REPTYPE_NAME"" = :Original_REPTYPE_NAME) AND ((:IsNull_REPTYPE_NAME_ENG = 1 AND ""REPTYPE_NAME_ENG"" IS NULL) OR (""REPTYPE_NAME_ENG"" = :Original_REPTYPE_NAME_ENG)) AND ((:IsNull_REPTYPE_CODE = 1 AND ""REPTYPE_CODE"" IS NULL) OR (""REPTYPE_CODE"" = :Original_REPTYPE_CODE)) AND (""PL_ID"" = :Original_PL_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "REPTYPE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_REPTYPE_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_REPTYPE_CODE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "REPTYPE_CODE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "REPTYPE_CODE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_REPAIRTYPE\" (\"REPTYPE_ID\", \"REPTYPE_NAME\", \"REPTYPE_NAME_ENG\", \"" +
                "REPTYPE_CODE\", \"PL_ID\") VALUES (:REPTYPE_ID, :REPTYPE_NAME, :REPTYPE_NAME_ENG, :" +
                "REPTYPE_CODE, :PL_ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "REPTYPE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "REPTYPE_CODE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_REPAIRTYPE"" SET ""REPTYPE_ID"" = :REPTYPE_ID, ""REPTYPE_NAME"" = :REPTYPE_NAME, ""REPTYPE_NAME_ENG"" = :REPTYPE_NAME_ENG, ""REPTYPE_CODE"" = :REPTYPE_CODE, ""PL_ID"" = :PL_ID WHERE ((""REPTYPE_ID"" = :Original_REPTYPE_ID) AND (""REPTYPE_NAME"" = :Original_REPTYPE_NAME) AND ((:IsNull_REPTYPE_NAME_ENG = 1 AND ""REPTYPE_NAME_ENG"" IS NULL) OR (""REPTYPE_NAME_ENG"" = :Original_REPTYPE_NAME_ENG)) AND ((:IsNull_REPTYPE_CODE = 1 AND ""REPTYPE_CODE"" IS NULL) OR (""REPTYPE_CODE"" = :Original_REPTYPE_CODE)) AND (""PL_ID"" = :Original_PL_ID))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "REPTYPE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("REPTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "REPTYPE_CODE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "REPTYPE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_REPTYPE_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "REPTYPE_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_REPTYPE_CODE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "REPTYPE_CODE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_REPTYPE_CODE", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "REPTYPE_CODE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = "Data Source=testdb;Persist Security Info=True;User ID=system;Password=manager;Uni" +
                "code=True";
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     REPTYPE_ID, REPTYPE_NAME, REPTYPE_NAME_ENG, REPTYPE_CODE, PL_ID\r\nFROM " +
                "        REW_REPAIRTYPE\r\nWHERE     (PL_ID = :PlantId)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.OracleClient.OracleParameter("PlantId", System.Data.OracleClient.OracleType.Number, 22, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByPlantId(RewDataSet.RepTypeDataTable dataTable, decimal PlantId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((decimal)(PlantId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet.RepTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet dataSet) {
            return this.Adapter.Update(dataSet, "RepType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlantTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PlantTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Plant";
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            tableMapping.ColumnMappings.Add("PL_NAME", "PlantName");
            tableMapping.ColumnMappings.Add("PL_NAME_ENG", "PlantNameEng");
            tableMapping.ColumnMappings.Add("PL_CORP_ID", "PlantCorpId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SYSTEM\".\"REW_PLANT\" WHERE ((\"PL_ID\" = :Original_PL_ID) AND (\"PL_NAME" +
                "\" = :Original_PL_NAME) AND ((:IsNull_PL_NAME_ENG = 1 AND \"PL_NAME_ENG\" IS NULL) " +
                "OR (\"PL_NAME_ENG\" = :Original_PL_NAME_ENG)) AND (\"PL_CORP_ID\" = :Original_PL_COR" +
                "P_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_PL_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"REW_PLANT\" (\"PL_ID\", \"PL_NAME\", \"PL_NAME_ENG\", \"PL_CORP_ID\"" +
                ") VALUES (:PL_ID, :PL_NAME, :PL_NAME_ENG, :PL_CORP_ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SYSTEM"".""REW_PLANT"" SET ""PL_ID"" = :PL_ID, ""PL_NAME"" = :PL_NAME, ""PL_NAME_ENG"" = :PL_NAME_ENG, ""PL_CORP_ID"" = :PL_CORP_ID WHERE ((""PL_ID"" = :Original_PL_ID) AND (""PL_NAME"" = :Original_PL_NAME) AND ((:IsNull_PL_NAME_ENG = 1 AND ""PL_NAME_ENG"" IS NULL) OR (""PL_NAME_ENG"" = :Original_PL_NAME_ENG)) AND (""PL_CORP_ID"" = :Original_PL_CORP_ID))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_PL_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = "Data Source=testdb;Persist Security Info=True;User ID=system;Password=manager;Uni" +
                "code=True";
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PL_ID, PL_NAME, PL_NAME_ENG, PL_CORP_ID FROM REW_PLANT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RewDataSet.PlantDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RewDataSet.PlantDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RewDataSet.PlantDataTable dataTable = new RewDataSet.PlantDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet.PlantDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RewDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Plant");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_PL_ID, string Original_PL_NAME, string Original_PL_NAME_ENG, string Original_PL_CORP_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_PL_ID));
            if ((Original_PL_NAME == null)) {
                throw new System.ArgumentNullException("Original_PL_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PL_NAME));
            }
            if ((Original_PL_NAME_ENG == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PL_NAME_ENG));
            }
            if ((Original_PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("Original_PL_CORP_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_PL_CORP_ID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal PL_ID, string PL_NAME, string PL_NAME_ENG, string PL_CORP_ID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(PL_ID));
            if ((PL_NAME == null)) {
                throw new System.ArgumentNullException("PL_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PL_NAME));
            }
            if ((PL_NAME_ENG == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PL_NAME_ENG));
            }
            if ((PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("PL_CORP_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PL_CORP_ID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal PL_ID, string PL_NAME, string PL_NAME_ENG, string PL_CORP_ID, decimal Original_PL_ID, string Original_PL_NAME, string Original_PL_NAME_ENG, string Original_PL_CORP_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(PL_ID));
            if ((PL_NAME == null)) {
                throw new System.ArgumentNullException("PL_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PL_NAME));
            }
            if ((PL_NAME_ENG == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PL_NAME_ENG));
            }
            if ((PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("PL_CORP_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(PL_CORP_ID));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_PL_ID));
            if ((Original_PL_NAME == null)) {
                throw new System.ArgumentNullException("Original_PL_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_PL_NAME));
            }
            if ((Original_PL_NAME_ENG == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PL_NAME_ENG));
            }
            if ((Original_PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("Original_PL_CORP_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_PL_CORP_ID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591